// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf.proto

#include "protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Proto {
class MemberAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemberAddr>
      _instance;
} _MemberAddr_default_instance_;
class TimeStampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeStamp>
      _instance;
} _TimeStamp_default_instance_;
class MemberInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemberInfo>
      _instance;
} _MemberInfo_default_instance_;
class MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Member>
      _instance;
} _Member_default_instance_;
class TableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Table>
      _instance;
} _Table_default_instance_;
class GossipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gossip>
      _instance;
} _Gossip_default_instance_;
}  // namespace Proto
namespace protobuf_protobuf_2eproto {
void InitDefaultsMemberAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Proto::_MemberAddr_default_instance_;
    new (ptr) ::Proto::MemberAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::MemberAddr::InitAsDefaultInstance();
}

void InitDefaultsMemberAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMemberAddrImpl);
}

void InitDefaultsTimeStampImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Proto::_TimeStamp_default_instance_;
    new (ptr) ::Proto::TimeStamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TimeStamp::InitAsDefaultInstance();
}

void InitDefaultsTimeStamp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeStampImpl);
}

void InitDefaultsMemberInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_2eproto::InitDefaultsTimeStamp();
  {
    void* ptr = &::Proto::_MemberInfo_default_instance_;
    new (ptr) ::Proto::MemberInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::MemberInfo::InitAsDefaultInstance();
}

void InitDefaultsMemberInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMemberInfoImpl);
}

void InitDefaultsMemberImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_2eproto::InitDefaultsMemberAddr();
  protobuf_protobuf_2eproto::InitDefaultsMemberInfo();
  {
    void* ptr = &::Proto::_Member_default_instance_;
    new (ptr) ::Proto::Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Member::InitAsDefaultInstance();
}

void InitDefaultsMember() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMemberImpl);
}

void InitDefaultsTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_2eproto::InitDefaultsMember();
  {
    void* ptr = &::Proto::_Table_default_instance_;
    new (ptr) ::Proto::Table();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Table::InitAsDefaultInstance();
}

void InitDefaultsTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTableImpl);
}

void InitDefaultsGossipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_2eproto::InitDefaultsMember();
  protobuf_protobuf_2eproto::InitDefaultsTable();
  {
    void* ptr = &::Proto::_Gossip_default_instance_;
    new (ptr) ::Proto::Gossip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::Gossip::InitAsDefaultInstance();
}

void InitDefaultsGossip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGossipImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberAddr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberAddr, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberAddr, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::TimeStamp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::TimeStamp, time_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberInfo, incarnation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::MemberInfo, time_stamp_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Member, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Member, info_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Table, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Table, table_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Gossip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Gossip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Gossip, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Gossip, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Gossip, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proto::Gossip, table_),
  3,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Proto::MemberAddr)},
  { 9, 15, sizeof(::Proto::TimeStamp)},
  { 16, 24, sizeof(::Proto::MemberInfo)},
  { 27, 34, sizeof(::Proto::Member)},
  { 36, 42, sizeof(::Proto::Table)},
  { 43, 52, sizeof(::Proto::Gossip)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::_MemberAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::_TimeStamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::_MemberInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::_Table_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::_Gossip_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protobuf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016protobuf.proto\022\005Proto\"&\n\nMemberAddr\022\n\n"
      "\002IP\030\001 \002(\r\022\014\n\004port\030\002 \002(\r\"\031\n\tTimeStamp\022\014\n\004"
      "time\030\001 \002(\003\"\236\001\n\nMemberInfo\022\'\n\006status\030\001 \002("
      "\0162\027.Proto.MemberInfo.State\022\023\n\013incarnatio"
      "n\030\002 \002(\r\022$\n\ntime_stamp\030\003 \002(\0132\020.Proto.Time"
      "Stamp\",\n\005State\022\t\n\005ALIVE\020\000\022\016\n\nSUSPICIOUS\020"
      "\001\022\010\n\004DEAD\020\002\"J\n\006Member\022\037\n\004addr\030\001 \002(\0132\021.Pr"
      "oto.MemberAddr\022\037\n\004info\030\002 \002(\0132\021.Proto.Mem"
      "berInfo\"%\n\005Table\022\034\n\005table\030\001 \003(\0132\r.Proto."
      "Member\"\253\001\n\006Gossip\022\'\n\004type\030\001 \002(\0162\031.Proto."
      "Gossip.MessageType\022\034\n\005owner\030\002 \002(\0132\r.Prot"
      "o.Member\022\033\n\004dest\030\003 \002(\0132\r.Proto.Member\022\033\n"
      "\005table\030\004 \002(\0132\014.Proto.Table\" \n\013MessageTyp"
      "e\022\010\n\004Ping\020\000\022\007\n\003Ack\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protobuf_2eproto
namespace Proto {
const ::google::protobuf::EnumDescriptor* MemberInfo_State_descriptor() {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2eproto::file_level_enum_descriptors[0];
}
bool MemberInfo_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MemberInfo_State MemberInfo::ALIVE;
const MemberInfo_State MemberInfo::SUSPICIOUS;
const MemberInfo_State MemberInfo::DEAD;
const MemberInfo_State MemberInfo::State_MIN;
const MemberInfo_State MemberInfo::State_MAX;
const int MemberInfo::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gossip_MessageType_descriptor() {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2eproto::file_level_enum_descriptors[1];
}
bool Gossip_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gossip_MessageType Gossip::Ping;
const Gossip_MessageType Gossip::Ack;
const Gossip_MessageType Gossip::MessageType_MIN;
const Gossip_MessageType Gossip::MessageType_MAX;
const int Gossip::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MemberAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberAddr::kIPFieldNumber;
const int MemberAddr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberAddr::MemberAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_2eproto::InitDefaultsMemberAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.MemberAddr)
}
MemberAddr::MemberAddr(const MemberAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:Proto.MemberAddr)
}

void MemberAddr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(port_));
}

MemberAddr::~MemberAddr() {
  // @@protoc_insertion_point(destructor:Proto.MemberAddr)
  SharedDtor();
}

void MemberAddr::SharedDtor() {
}

void MemberAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberAddr::descriptor() {
  ::protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberAddr& MemberAddr::default_instance() {
  ::protobuf_protobuf_2eproto::InitDefaultsMemberAddr();
  return *internal_default_instance();
}

MemberAddr* MemberAddr::New(::google::protobuf::Arena* arena) const {
  MemberAddr* n = new MemberAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.MemberAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.MemberAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IP = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.MemberAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.MemberAddr)
  return false;
#undef DO_
}

void MemberAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.MemberAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 IP = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.MemberAddr)
}

::google::protobuf::uint8* MemberAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.MemberAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 IP = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.MemberAddr)
  return target;
}

size_t MemberAddr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.MemberAddr)
  size_t total_size = 0;

  if (has_ip()) {
    // required uint32 IP = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t MemberAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.MemberAddr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 IP = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.MemberAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.MemberAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.MemberAddr)
    MergeFrom(*source);
  }
}

void MemberAddr::MergeFrom(const MemberAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.MemberAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.MemberAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAddr::CopyFrom(const MemberAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.MemberAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MemberAddr::Swap(MemberAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberAddr::InternalSwap(MemberAddr* other) {
  using std::swap;
  swap(ip_, other->ip_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberAddr::GetMetadata() const {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeStamp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeStamp::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeStamp::TimeStamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_2eproto::InitDefaultsTimeStamp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TimeStamp)
}
TimeStamp::TimeStamp(const TimeStamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Proto.TimeStamp)
}

void TimeStamp::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
}

TimeStamp::~TimeStamp() {
  // @@protoc_insertion_point(destructor:Proto.TimeStamp)
  SharedDtor();
}

void TimeStamp::SharedDtor() {
}

void TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeStamp::descriptor() {
  ::protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeStamp& TimeStamp::default_instance() {
  ::protobuf_protobuf_2eproto::InitDefaultsTimeStamp();
  return *internal_default_instance();
}

TimeStamp* TimeStamp::New(::google::protobuf::Arena* arena) const {
  TimeStamp* n = new TimeStamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.TimeStamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.TimeStamp)
  return false;
#undef DO_
}

void TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.TimeStamp)
}

::google::protobuf::uint8* TimeStamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TimeStamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TimeStamp)
  return target;
}

size_t TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TimeStamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 time = 1;
  if (has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeStamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeStamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TimeStamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TimeStamp)
    MergeFrom(*source);
  }
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    set_time(from.time());
  }
}

void TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TimeStamp::Swap(TimeStamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeStamp::InternalSwap(TimeStamp* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeStamp::GetMetadata() const {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemberInfo::InitAsDefaultInstance() {
  ::Proto::_MemberInfo_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::Proto::TimeStamp*>(
      ::Proto::TimeStamp::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberInfo::kStatusFieldNumber;
const int MemberInfo::kIncarnationFieldNumber;
const int MemberInfo::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberInfo::MemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_2eproto::InitDefaultsMemberInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.MemberInfo)
}
MemberInfo::MemberInfo(const MemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_stamp()) {
    time_stamp_ = new ::Proto::TimeStamp(*from.time_stamp_);
  } else {
    time_stamp_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&incarnation_) -
    reinterpret_cast<char*>(&status_)) + sizeof(incarnation_));
  // @@protoc_insertion_point(copy_constructor:Proto.MemberInfo)
}

void MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&incarnation_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(incarnation_));
}

MemberInfo::~MemberInfo() {
  // @@protoc_insertion_point(destructor:Proto.MemberInfo)
  SharedDtor();
}

void MemberInfo::SharedDtor() {
  if (this != internal_default_instance()) delete time_stamp_;
}

void MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberInfo::descriptor() {
  ::protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberInfo& MemberInfo::default_instance() {
  ::protobuf_protobuf_2eproto::InitDefaultsMemberInfo();
  return *internal_default_instance();
}

MemberInfo* MemberInfo::New(::google::protobuf::Arena* arena) const {
  MemberInfo* n = new MemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.MemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_stamp_ != NULL);
    time_stamp_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&incarnation_) -
        reinterpret_cast<char*>(&status_)) + sizeof(incarnation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.MemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.MemberInfo.State status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::MemberInfo_State_IsValid(value)) {
            set_status(static_cast< ::Proto::MemberInfo_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 incarnation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_incarnation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incarnation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Proto.TimeStamp time_stamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_stamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.MemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.MemberInfo)
  return false;
#undef DO_
}

void MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.MemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.MemberInfo.State status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required uint32 incarnation = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->incarnation(), output);
  }

  // required .Proto.TimeStamp time_stamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->time_stamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.MemberInfo)
}

::google::protobuf::uint8* MemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.MemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.MemberInfo.State status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required uint32 incarnation = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->incarnation(), target);
  }

  // required .Proto.TimeStamp time_stamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->time_stamp_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.MemberInfo)
  return target;
}

size_t MemberInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.MemberInfo)
  size_t total_size = 0;

  if (has_time_stamp()) {
    // required .Proto.TimeStamp time_stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_stamp_);
  }

  if (has_status()) {
    // required .Proto.MemberInfo.State status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_incarnation()) {
    // required uint32 incarnation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incarnation());
  }

  return total_size;
}
size_t MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.MemberInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Proto.TimeStamp time_stamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_stamp_);

    // required .Proto.MemberInfo.State status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required uint32 incarnation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->incarnation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.MemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.MemberInfo)
    MergeFrom(*source);
  }
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.MemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_time_stamp()->::Proto::TimeStamp::MergeFrom(from.time_stamp());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      incarnation_ = from.incarnation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_time_stamp()) {
    if (!this->time_stamp_->IsInitialized()) return false;
  }
  return true;
}

void MemberInfo::Swap(MemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberInfo::InternalSwap(MemberInfo* other) {
  using std::swap;
  swap(time_stamp_, other->time_stamp_);
  swap(status_, other->status_);
  swap(incarnation_, other->incarnation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberInfo::GetMetadata() const {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Member::InitAsDefaultInstance() {
  ::Proto::_Member_default_instance_._instance.get_mutable()->addr_ = const_cast< ::Proto::MemberAddr*>(
      ::Proto::MemberAddr::internal_default_instance());
  ::Proto::_Member_default_instance_._instance.get_mutable()->info_ = const_cast< ::Proto::MemberInfo*>(
      ::Proto::MemberInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kAddrFieldNumber;
const int Member::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_2eproto::InitDefaultsMember();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Member)
}
Member::Member(const Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_addr()) {
    addr_ = new ::Proto::MemberAddr(*from.addr_);
  } else {
    addr_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::Proto::MemberInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.Member)
}

void Member::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&info_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(info_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:Proto.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  if (this != internal_default_instance()) delete addr_;
  if (this != internal_default_instance()) delete info_;
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  ::protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Member& Member::default_instance() {
  ::protobuf_protobuf_2eproto::InitDefaultsMember();
  return *internal_default_instance();
}

Member* Member::New(::google::protobuf::Arena* arena) const {
  Member* n = new Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(addr_ != NULL);
      addr_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.MemberAddr addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Proto.MemberInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.MemberAddr addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->addr_, output);
  }

  // required .Proto.MemberInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Member)
}

::google::protobuf::uint8* Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.MemberAddr addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->addr_, deterministic, target);
  }

  // required .Proto.MemberInfo info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Member)
  return target;
}

size_t Member::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.Member)
  size_t total_size = 0;

  if (has_addr()) {
    // required .Proto.MemberAddr addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->addr_);
  }

  if (has_info()) {
    // required .Proto.MemberInfo info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_);
  }

  return total_size;
}
size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Proto.MemberAddr addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->addr_);

    // required .Proto.MemberInfo info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_addr()->::Proto::MemberAddr::MergeFrom(from.addr());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_info()->::Proto::MemberInfo::MergeFrom(from.info());
    }
  }
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_addr()) {
    if (!this->addr_->IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info_->IsInitialized()) return false;
  }
  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  using std::swap;
  swap(addr_, other->addr_);
  swap(info_, other->info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Table::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Table::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Table::Table()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_2eproto::InitDefaultsTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Table)
}
Table::Table(const Table& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      table_(from.table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.Table)
}

void Table::SharedCtor() {
  _cached_size_ = 0;
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:Proto.Table)
  SharedDtor();
}

void Table::SharedDtor() {
}

void Table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table::descriptor() {
  ::protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Table& Table::default_instance() {
  ::protobuf_protobuf_2eproto::InitDefaultsTable();
  return *internal_default_instance();
}

Table* Table::New(::google::protobuf::Arena* arena) const {
  Table* n = new Table;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Table)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.Member table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Table)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Table)
  return false;
#undef DO_
}

void Table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Member table = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->table_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Table)
}

::google::protobuf::uint8* Table::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Table)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.Member table = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->table_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->table(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Table)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Proto.Member table = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->table_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->table(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Table)
  GOOGLE_DCHECK_NE(&from, this);
  const Table* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Table>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Table)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Table)
    MergeFrom(*source);
  }
}

void Table::MergeFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Table)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
}

void Table::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->table())) return false;
  return true;
}

void Table::Swap(Table* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Table::InternalSwap(Table* other) {
  using std::swap;
  table_.InternalSwap(&other->table_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Table::GetMetadata() const {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gossip::InitAsDefaultInstance() {
  ::Proto::_Gossip_default_instance_._instance.get_mutable()->owner_ = const_cast< ::Proto::Member*>(
      ::Proto::Member::internal_default_instance());
  ::Proto::_Gossip_default_instance_._instance.get_mutable()->dest_ = const_cast< ::Proto::Member*>(
      ::Proto::Member::internal_default_instance());
  ::Proto::_Gossip_default_instance_._instance.get_mutable()->table_ = const_cast< ::Proto::Table*>(
      ::Proto::Table::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gossip::kTypeFieldNumber;
const int Gossip::kOwnerFieldNumber;
const int Gossip::kDestFieldNumber;
const int Gossip::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gossip::Gossip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_2eproto::InitDefaultsGossip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.Gossip)
}
Gossip::Gossip(const Gossip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_owner()) {
    owner_ = new ::Proto::Member(*from.owner_);
  } else {
    owner_ = NULL;
  }
  if (from.has_dest()) {
    dest_ = new ::Proto::Member(*from.dest_);
  } else {
    dest_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::Proto::Table(*from.table_);
  } else {
    table_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Proto.Gossip)
}

void Gossip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(type_));
}

Gossip::~Gossip() {
  // @@protoc_insertion_point(destructor:Proto.Gossip)
  SharedDtor();
}

void Gossip::SharedDtor() {
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete dest_;
  if (this != internal_default_instance()) delete table_;
}

void Gossip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gossip::descriptor() {
  ::protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gossip& Gossip::default_instance() {
  ::protobuf_protobuf_2eproto::InitDefaultsGossip();
  return *internal_default_instance();
}

Gossip* Gossip::New(::google::protobuf::Arena* arena) const {
  Gossip* n = new Gossip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gossip::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.Gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_ != NULL);
      owner_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dest_ != NULL);
      dest_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(table_ != NULL);
      table_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.Gossip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Proto.Gossip.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto::Gossip_MessageType_IsValid(value)) {
            set_type(static_cast< ::Proto::Gossip_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Proto.Member owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Proto.Member dest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Proto.Table table = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.Gossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.Gossip)
  return false;
#undef DO_
}

void Gossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.Gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.Gossip.MessageType type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .Proto.Member owner = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->owner_, output);
  }

  // required .Proto.Member dest = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dest_, output);
  }

  // required .Proto.Table table = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->table_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.Gossip)
}

::google::protobuf::uint8* Gossip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.Gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Proto.Gossip.MessageType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .Proto.Member owner = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->owner_, deterministic, target);
  }

  // required .Proto.Member dest = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->dest_, deterministic, target);
  }

  // required .Proto.Table table = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->table_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.Gossip)
  return target;
}

size_t Gossip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Proto.Gossip)
  size_t total_size = 0;

  if (has_owner()) {
    // required .Proto.Member owner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->owner_);
  }

  if (has_dest()) {
    // required .Proto.Member dest = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dest_);
  }

  if (has_table()) {
    // required .Proto.Table table = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->table_);
  }

  if (has_type()) {
    // required .Proto.Gossip.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Gossip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.Gossip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Proto.Member owner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->owner_);

    // required .Proto.Member dest = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dest_);

    // required .Proto.Table table = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->table_);

    // required .Proto.Gossip.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.Gossip)
  GOOGLE_DCHECK_NE(&from, this);
  const Gossip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gossip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.Gossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.Gossip)
    MergeFrom(*source);
  }
}

void Gossip::MergeFrom(const Gossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.Gossip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_owner()->::Proto::Member::MergeFrom(from.owner());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dest()->::Proto::Member::MergeFrom(from.dest());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_table()->::Proto::Table::MergeFrom(from.table());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.Gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gossip::CopyFrom(const Gossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.Gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gossip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_owner()) {
    if (!this->owner_->IsInitialized()) return false;
  }
  if (has_dest()) {
    if (!this->dest_->IsInitialized()) return false;
  }
  if (has_table()) {
    if (!this->table_->IsInitialized()) return false;
  }
  return true;
}

void Gossip::Swap(Gossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gossip::InternalSwap(Gossip* other) {
  using std::swap;
  swap(owner_, other->owner_);
  swap(dest_, other->dest_);
  swap(table_, other->table_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gossip::GetMetadata() const {
  protobuf_protobuf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto

// @@protoc_insertion_point(global_scope)
