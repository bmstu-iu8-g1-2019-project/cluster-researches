// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf.proto

#ifndef PROTOBUF_protobuf_2eproto__INCLUDED
#define PROTOBUF_protobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_protobuf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMemberAddrImpl();
void InitDefaultsMemberAddr();
void InitDefaultsTimeStampImpl();
void InitDefaultsTimeStamp();
void InitDefaultsMemberInfoImpl();
void InitDefaultsMemberInfo();
void InitDefaultsMemberImpl();
void InitDefaultsMember();
void InitDefaultsTableImpl();
void InitDefaultsTable();
void InitDefaultsGossipImpl();
void InitDefaultsGossip();
inline void InitDefaults() {
  InitDefaultsMemberAddr();
  InitDefaultsTimeStamp();
  InitDefaultsMemberInfo();
  InitDefaultsMember();
  InitDefaultsTable();
  InitDefaultsGossip();
}
}  // namespace protobuf_protobuf_2eproto
namespace Proto {
class Gossip;
class GossipDefaultTypeInternal;
extern GossipDefaultTypeInternal _Gossip_default_instance_;
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class MemberAddr;
class MemberAddrDefaultTypeInternal;
extern MemberAddrDefaultTypeInternal _MemberAddr_default_instance_;
class MemberInfo;
class MemberInfoDefaultTypeInternal;
extern MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TimeStamp;
class TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
}  // namespace Proto
namespace Proto {

enum MemberInfo_State {
  MemberInfo_State_ALIVE = 0,
  MemberInfo_State_SUSPICIOUS = 1,
  MemberInfo_State_DEAD = 2
};
bool MemberInfo_State_IsValid(int value);
const MemberInfo_State MemberInfo_State_State_MIN = MemberInfo_State_ALIVE;
const MemberInfo_State MemberInfo_State_State_MAX = MemberInfo_State_DEAD;
const int MemberInfo_State_State_ARRAYSIZE = MemberInfo_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* MemberInfo_State_descriptor();
inline const ::std::string& MemberInfo_State_Name(MemberInfo_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    MemberInfo_State_descriptor(), value);
}
inline bool MemberInfo_State_Parse(
    const ::std::string& name, MemberInfo_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MemberInfo_State>(
    MemberInfo_State_descriptor(), name, value);
}
enum Gossip_MessageType {
  Gossip_MessageType_Ping = 0,
  Gossip_MessageType_Ack = 1
};
bool Gossip_MessageType_IsValid(int value);
const Gossip_MessageType Gossip_MessageType_MessageType_MIN = Gossip_MessageType_Ping;
const Gossip_MessageType Gossip_MessageType_MessageType_MAX = Gossip_MessageType_Ack;
const int Gossip_MessageType_MessageType_ARRAYSIZE = Gossip_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gossip_MessageType_descriptor();
inline const ::std::string& Gossip_MessageType_Name(Gossip_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gossip_MessageType_descriptor(), value);
}
inline bool Gossip_MessageType_Parse(
    const ::std::string& name, Gossip_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gossip_MessageType>(
    Gossip_MessageType_descriptor(), name, value);
}
// ===================================================================

class MemberAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.MemberAddr) */ {
 public:
  MemberAddr();
  virtual ~MemberAddr();

  MemberAddr(const MemberAddr& from);

  inline MemberAddr& operator=(const MemberAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemberAddr(MemberAddr&& from) noexcept
    : MemberAddr() {
    *this = ::std::move(from);
  }

  inline MemberAddr& operator=(MemberAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAddr* internal_default_instance() {
    return reinterpret_cast<const MemberAddr*>(
               &_MemberAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MemberAddr* other);
  friend void swap(MemberAddr& a, MemberAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemberAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberAddr& from);
  void MergeFrom(const MemberAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 IP = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIPFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.MemberAddr)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  friend struct ::protobuf_protobuf_2eproto::TableStruct;
  friend void ::protobuf_protobuf_2eproto::InitDefaultsMemberAddrImpl();
};
// -------------------------------------------------------------------

class TimeStamp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.TimeStamp) */ {
 public:
  TimeStamp();
  virtual ~TimeStamp();

  TimeStamp(const TimeStamp& from);

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TimeStamp* other);
  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeStamp* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeStamp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeStamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.TimeStamp)
 private:
  void set_has_time();
  void clear_has_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 time_;
  friend struct ::protobuf_protobuf_2eproto::TableStruct;
  friend void ::protobuf_protobuf_2eproto::InitDefaultsTimeStampImpl();
};
// -------------------------------------------------------------------

class MemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.MemberInfo) */ {
 public:
  MemberInfo();
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemberInfo(MemberInfo&& from) noexcept
    : MemberInfo() {
    *this = ::std::move(from);
  }

  inline MemberInfo& operator=(MemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberInfo* internal_default_instance() {
    return reinterpret_cast<const MemberInfo*>(
               &_MemberInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MemberInfo* other);
  friend void swap(MemberInfo& a, MemberInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemberInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MemberInfo_State State;
  static const State ALIVE =
    MemberInfo_State_ALIVE;
  static const State SUSPICIOUS =
    MemberInfo_State_SUSPICIOUS;
  static const State DEAD =
    MemberInfo_State_DEAD;
  static inline bool State_IsValid(int value) {
    return MemberInfo_State_IsValid(value);
  }
  static const State State_MIN =
    MemberInfo_State_State_MIN;
  static const State State_MAX =
    MemberInfo_State_State_MAX;
  static const int State_ARRAYSIZE =
    MemberInfo_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return MemberInfo_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return MemberInfo_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return MemberInfo_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Proto.TimeStamp time_stamp = 3;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  const ::Proto::TimeStamp& time_stamp() const;
  ::Proto::TimeStamp* release_time_stamp();
  ::Proto::TimeStamp* mutable_time_stamp();
  void set_allocated_time_stamp(::Proto::TimeStamp* time_stamp);

  // required .Proto.MemberInfo.State status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::Proto::MemberInfo_State status() const;
  void set_status(::Proto::MemberInfo_State value);

  // required uint32 incarnation = 2;
  bool has_incarnation() const;
  void clear_incarnation();
  static const int kIncarnationFieldNumber = 2;
  ::google::protobuf::uint32 incarnation() const;
  void set_incarnation(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.MemberInfo)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_incarnation();
  void clear_has_incarnation();
  void set_has_time_stamp();
  void clear_has_time_stamp();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Proto::TimeStamp* time_stamp_;
  int status_;
  ::google::protobuf::uint32 incarnation_;
  friend struct ::protobuf_protobuf_2eproto::TableStruct;
  friend void ::protobuf_protobuf_2eproto::InitDefaultsMemberInfoImpl();
};
// -------------------------------------------------------------------

class Member : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Member* other);
  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const PROTOBUF_FINAL { return New(NULL); }

  Member* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Proto.MemberAddr addr = 1;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::Proto::MemberAddr& addr() const;
  ::Proto::MemberAddr* release_addr();
  ::Proto::MemberAddr* mutable_addr();
  void set_allocated_addr(::Proto::MemberAddr* addr);

  // required .Proto.MemberInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::Proto::MemberInfo& info() const;
  ::Proto::MemberInfo* release_info();
  ::Proto::MemberInfo* mutable_info();
  void set_allocated_info(::Proto::MemberInfo* info);

  // @@protoc_insertion_point(class_scope:Proto.Member)
 private:
  void set_has_addr();
  void clear_has_addr();
  void set_has_info();
  void clear_has_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Proto::MemberAddr* addr_;
  ::Proto::MemberInfo* info_;
  friend struct ::protobuf_protobuf_2eproto::TableStruct;
  friend void ::protobuf_protobuf_2eproto::InitDefaultsMemberImpl();
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Table* other);
  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const PROTOBUF_FINAL { return New(NULL); }

  Table* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Table* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto.Member table = 1;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::Proto::Member& table(int index) const;
  ::Proto::Member* mutable_table(int index);
  ::Proto::Member* add_table();
  ::google::protobuf::RepeatedPtrField< ::Proto::Member >*
      mutable_table();
  const ::google::protobuf::RepeatedPtrField< ::Proto::Member >&
      table() const;

  // @@protoc_insertion_point(class_scope:Proto.Table)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Proto::Member > table_;
  friend struct ::protobuf_protobuf_2eproto::TableStruct;
  friend void ::protobuf_protobuf_2eproto::InitDefaultsTableImpl();
};
// -------------------------------------------------------------------

class Gossip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Gossip) */ {
 public:
  Gossip();
  virtual ~Gossip();

  Gossip(const Gossip& from);

  inline Gossip& operator=(const Gossip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gossip(Gossip&& from) noexcept
    : Gossip() {
    *this = ::std::move(from);
  }

  inline Gossip& operator=(Gossip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gossip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gossip* internal_default_instance() {
    return reinterpret_cast<const Gossip*>(
               &_Gossip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Gossip* other);
  friend void swap(Gossip& a, Gossip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gossip* New() const PROTOBUF_FINAL { return New(NULL); }

  Gossip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gossip& from);
  void MergeFrom(const Gossip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gossip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gossip_MessageType MessageType;
  static const MessageType Ping =
    Gossip_MessageType_Ping;
  static const MessageType Ack =
    Gossip_MessageType_Ack;
  static inline bool MessageType_IsValid(int value) {
    return Gossip_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Gossip_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Gossip_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Gossip_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Gossip_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Gossip_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Gossip_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Proto.Member owner = 2;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::Proto::Member& owner() const;
  ::Proto::Member* release_owner();
  ::Proto::Member* mutable_owner();
  void set_allocated_owner(::Proto::Member* owner);

  // required .Proto.Member dest = 3;
  bool has_dest() const;
  void clear_dest();
  static const int kDestFieldNumber = 3;
  const ::Proto::Member& dest() const;
  ::Proto::Member* release_dest();
  ::Proto::Member* mutable_dest();
  void set_allocated_dest(::Proto::Member* dest);

  // required .Proto.Table table = 4;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 4;
  const ::Proto::Table& table() const;
  ::Proto::Table* release_table();
  ::Proto::Table* mutable_table();
  void set_allocated_table(::Proto::Table* table);

  // required .Proto.Gossip.MessageType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Proto::Gossip_MessageType type() const;
  void set_type(::Proto::Gossip_MessageType value);

  // @@protoc_insertion_point(class_scope:Proto.Gossip)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_owner();
  void clear_has_owner();
  void set_has_dest();
  void clear_has_dest();
  void set_has_table();
  void clear_has_table();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Proto::Member* owner_;
  ::Proto::Member* dest_;
  ::Proto::Table* table_;
  int type_;
  friend struct ::protobuf_protobuf_2eproto::TableStruct;
  friend void ::protobuf_protobuf_2eproto::InitDefaultsGossipImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemberAddr

// required uint32 IP = 1;
inline bool MemberAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberAddr::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 MemberAddr::ip() const {
  // @@protoc_insertion_point(field_get:Proto.MemberAddr.IP)
  return ip_;
}
inline void MemberAddr::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberAddr.IP)
}

// required uint32 port = 2;
inline bool MemberAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberAddr::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 MemberAddr::port() const {
  // @@protoc_insertion_point(field_get:Proto.MemberAddr.port)
  return port_;
}
inline void MemberAddr::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberAddr.port)
}

// -------------------------------------------------------------------

// TimeStamp

// required uint32 time = 1;
inline bool TimeStamp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeStamp::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeStamp::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeStamp::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TimeStamp::time() const {
  // @@protoc_insertion_point(field_get:Proto.TimeStamp.time)
  return time_;
}
inline void TimeStamp::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Proto.TimeStamp.time)
}

// -------------------------------------------------------------------

// MemberInfo

// required .Proto.MemberInfo.State status = 1;
inline bool MemberInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Proto::MemberInfo_State MemberInfo::status() const {
  // @@protoc_insertion_point(field_get:Proto.MemberInfo.status)
  return static_cast< ::Proto::MemberInfo_State >(status_);
}
inline void MemberInfo::set_status(::Proto::MemberInfo_State value) {
  assert(::Proto::MemberInfo_State_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberInfo.status)
}

// required uint32 incarnation = 2;
inline bool MemberInfo::has_incarnation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberInfo::set_has_incarnation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemberInfo::clear_has_incarnation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemberInfo::clear_incarnation() {
  incarnation_ = 0u;
  clear_has_incarnation();
}
inline ::google::protobuf::uint32 MemberInfo::incarnation() const {
  // @@protoc_insertion_point(field_get:Proto.MemberInfo.incarnation)
  return incarnation_;
}
inline void MemberInfo::set_incarnation(::google::protobuf::uint32 value) {
  set_has_incarnation();
  incarnation_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberInfo.incarnation)
}

// required .Proto.TimeStamp time_stamp = 3;
inline bool MemberInfo::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberInfo::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberInfo::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberInfo::clear_time_stamp() {
  if (time_stamp_ != NULL) time_stamp_->Clear();
  clear_has_time_stamp();
}
inline const ::Proto::TimeStamp& MemberInfo::time_stamp() const {
  const ::Proto::TimeStamp* p = time_stamp_;
  // @@protoc_insertion_point(field_get:Proto.MemberInfo.time_stamp)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::TimeStamp*>(
      &::Proto::_TimeStamp_default_instance_);
}
inline ::Proto::TimeStamp* MemberInfo::release_time_stamp() {
  // @@protoc_insertion_point(field_release:Proto.MemberInfo.time_stamp)
  clear_has_time_stamp();
  ::Proto::TimeStamp* temp = time_stamp_;
  time_stamp_ = NULL;
  return temp;
}
inline ::Proto::TimeStamp* MemberInfo::mutable_time_stamp() {
  set_has_time_stamp();
  if (time_stamp_ == NULL) {
    time_stamp_ = new ::Proto::TimeStamp;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MemberInfo.time_stamp)
  return time_stamp_;
}
inline void MemberInfo::set_allocated_time_stamp(::Proto::TimeStamp* time_stamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_stamp_;
  }
  if (time_stamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time_stamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    set_has_time_stamp();
  } else {
    clear_has_time_stamp();
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:Proto.MemberInfo.time_stamp)
}

// -------------------------------------------------------------------

// Member

// required .Proto.MemberAddr addr = 1;
inline bool Member::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Member::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Member::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Member::clear_addr() {
  if (addr_ != NULL) addr_->Clear();
  clear_has_addr();
}
inline const ::Proto::MemberAddr& Member::addr() const {
  const ::Proto::MemberAddr* p = addr_;
  // @@protoc_insertion_point(field_get:Proto.Member.addr)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::MemberAddr*>(
      &::Proto::_MemberAddr_default_instance_);
}
inline ::Proto::MemberAddr* Member::release_addr() {
  // @@protoc_insertion_point(field_release:Proto.Member.addr)
  clear_has_addr();
  ::Proto::MemberAddr* temp = addr_;
  addr_ = NULL;
  return temp;
}
inline ::Proto::MemberAddr* Member::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) {
    addr_ = new ::Proto::MemberAddr;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Member.addr)
  return addr_;
}
inline void Member::set_allocated_addr(::Proto::MemberAddr* addr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete addr_;
  }
  if (addr) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addr, submessage_arena);
    }
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_ = addr;
  // @@protoc_insertion_point(field_set_allocated:Proto.Member.addr)
}

// required .Proto.MemberInfo info = 2;
inline bool Member::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Member::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Member::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Member::clear_info() {
  if (info_ != NULL) info_->Clear();
  clear_has_info();
}
inline const ::Proto::MemberInfo& Member::info() const {
  const ::Proto::MemberInfo* p = info_;
  // @@protoc_insertion_point(field_get:Proto.Member.info)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::MemberInfo*>(
      &::Proto::_MemberInfo_default_instance_);
}
inline ::Proto::MemberInfo* Member::release_info() {
  // @@protoc_insertion_point(field_release:Proto.Member.info)
  clear_has_info();
  ::Proto::MemberInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::Proto::MemberInfo* Member::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::Proto::MemberInfo;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Member.info)
  return info_;
}
inline void Member::set_allocated_info(::Proto::MemberInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete info_;
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
  } else {
    clear_has_info();
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Proto.Member.info)
}

// -------------------------------------------------------------------

// Table

// repeated .Proto.Member table = 1;
inline int Table::table_size() const {
  return table_.size();
}
inline void Table::clear_table() {
  table_.Clear();
}
inline const ::Proto::Member& Table::table(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Table.table)
  return table_.Get(index);
}
inline ::Proto::Member* Table::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Table.table)
  return table_.Mutable(index);
}
inline ::Proto::Member* Table::add_table() {
  // @@protoc_insertion_point(field_add:Proto.Table.table)
  return table_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::Member >*
Table::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Table.table)
  return &table_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::Member >&
Table::table() const {
  // @@protoc_insertion_point(field_list:Proto.Table.table)
  return table_;
}

// -------------------------------------------------------------------

// Gossip

// required .Proto.Gossip.MessageType type = 1;
inline bool Gossip::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gossip::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gossip::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gossip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Proto::Gossip_MessageType Gossip::type() const {
  // @@protoc_insertion_point(field_get:Proto.Gossip.type)
  return static_cast< ::Proto::Gossip_MessageType >(type_);
}
inline void Gossip::set_type(::Proto::Gossip_MessageType value) {
  assert(::Proto::Gossip_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto.Gossip.type)
}

// required .Proto.Member owner = 2;
inline bool Gossip::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gossip::set_has_owner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gossip::clear_has_owner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gossip::clear_owner() {
  if (owner_ != NULL) owner_->Clear();
  clear_has_owner();
}
inline const ::Proto::Member& Gossip::owner() const {
  const ::Proto::Member* p = owner_;
  // @@protoc_insertion_point(field_get:Proto.Gossip.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Member*>(
      &::Proto::_Member_default_instance_);
}
inline ::Proto::Member* Gossip::release_owner() {
  // @@protoc_insertion_point(field_release:Proto.Gossip.owner)
  clear_has_owner();
  ::Proto::Member* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::Proto::Member* Gossip::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::Proto::Member;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Gossip.owner)
  return owner_;
}
inline void Gossip::set_allocated_owner(::Proto::Member* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete owner_;
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Proto.Gossip.owner)
}

// required .Proto.Member dest = 3;
inline bool Gossip::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gossip::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gossip::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gossip::clear_dest() {
  if (dest_ != NULL) dest_->Clear();
  clear_has_dest();
}
inline const ::Proto::Member& Gossip::dest() const {
  const ::Proto::Member* p = dest_;
  // @@protoc_insertion_point(field_get:Proto.Gossip.dest)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Member*>(
      &::Proto::_Member_default_instance_);
}
inline ::Proto::Member* Gossip::release_dest() {
  // @@protoc_insertion_point(field_release:Proto.Gossip.dest)
  clear_has_dest();
  ::Proto::Member* temp = dest_;
  dest_ = NULL;
  return temp;
}
inline ::Proto::Member* Gossip::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) {
    dest_ = new ::Proto::Member;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Gossip.dest)
  return dest_;
}
inline void Gossip::set_allocated_dest(::Proto::Member* dest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dest_;
  }
  if (dest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dest, submessage_arena);
    }
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_ = dest;
  // @@protoc_insertion_point(field_set_allocated:Proto.Gossip.dest)
}

// required .Proto.Table table = 4;
inline bool Gossip::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gossip::set_has_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gossip::clear_has_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gossip::clear_table() {
  if (table_ != NULL) table_->Clear();
  clear_has_table();
}
inline const ::Proto::Table& Gossip::table() const {
  const ::Proto::Table* p = table_;
  // @@protoc_insertion_point(field_get:Proto.Gossip.table)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Table*>(
      &::Proto::_Table_default_instance_);
}
inline ::Proto::Table* Gossip::release_table() {
  // @@protoc_insertion_point(field_release:Proto.Gossip.table)
  clear_has_table();
  ::Proto::Table* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::Proto::Table* Gossip::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    table_ = new ::Proto::Table;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Gossip.table)
  return table_;
}
inline void Gossip::set_allocated_table(::Proto::Table* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_;
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
  } else {
    clear_has_table();
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:Proto.Gossip.table)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Proto::MemberInfo_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::MemberInfo_State>() {
  return ::Proto::MemberInfo_State_descriptor();
}
template <> struct is_proto_enum< ::Proto::Gossip_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::Gossip_MessageType>() {
  return ::Proto::Gossip_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2eproto__INCLUDED
