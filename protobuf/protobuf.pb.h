// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2eproto;
namespace Proto {
class Gossip;
class GossipDefaultTypeInternal;
extern GossipDefaultTypeInternal _Gossip_default_instance_;
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class MemberAddr;
class MemberAddrDefaultTypeInternal;
extern MemberAddrDefaultTypeInternal _MemberAddr_default_instance_;
class MemberInfo;
class MemberInfoDefaultTypeInternal;
extern MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
class Table;
class TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TimeStamp;
class TimeStampDefaultTypeInternal;
extern TimeStampDefaultTypeInternal _TimeStamp_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::Gossip* Arena::CreateMaybeMessage<::Proto::Gossip>(Arena*);
template<> ::Proto::Member* Arena::CreateMaybeMessage<::Proto::Member>(Arena*);
template<> ::Proto::MemberAddr* Arena::CreateMaybeMessage<::Proto::MemberAddr>(Arena*);
template<> ::Proto::MemberInfo* Arena::CreateMaybeMessage<::Proto::MemberInfo>(Arena*);
template<> ::Proto::Table* Arena::CreateMaybeMessage<::Proto::Table>(Arena*);
template<> ::Proto::TimeStamp* Arena::CreateMaybeMessage<::Proto::TimeStamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum MemberInfo_State : int {
  MemberInfo_State_ALIVE = 0,
  MemberInfo_State_SUSPICIOUS = 1,
  MemberInfo_State_DEAD = 2
};
bool MemberInfo_State_IsValid(int value);
constexpr MemberInfo_State MemberInfo_State_State_MIN = MemberInfo_State_ALIVE;
constexpr MemberInfo_State MemberInfo_State_State_MAX = MemberInfo_State_DEAD;
constexpr int MemberInfo_State_State_ARRAYSIZE = MemberInfo_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemberInfo_State_descriptor();
template<typename T>
inline const std::string& MemberInfo_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemberInfo_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemberInfo_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MemberInfo_State_descriptor(), enum_t_value);
}
inline bool MemberInfo_State_Parse(
    const std::string& name, MemberInfo_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MemberInfo_State>(
    MemberInfo_State_descriptor(), name, value);
}
// ===================================================================

class MemberAddr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MemberAddr) */ {
 public:
  MemberAddr();
  virtual ~MemberAddr();

  MemberAddr(const MemberAddr& from);
  MemberAddr(MemberAddr&& from) noexcept
    : MemberAddr() {
    *this = ::std::move(from);
  }

  inline MemberAddr& operator=(const MemberAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberAddr& operator=(MemberAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAddr* internal_default_instance() {
    return reinterpret_cast<const MemberAddr*>(
               &_MemberAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MemberAddr& a, MemberAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberAddr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberAddr* New() const final {
    return CreateMaybeMessage<MemberAddr>(nullptr);
  }

  MemberAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberAddr& from);
  void MergeFrom(const MemberAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MemberAddr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIPFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // required uint32 IP = 1;
  bool has_ip() const;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.MemberAddr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class TimeStamp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TimeStamp) */ {
 public:
  TimeStamp();
  virtual ~TimeStamp();

  TimeStamp(const TimeStamp& from);
  TimeStamp(TimeStamp&& from) noexcept
    : TimeStamp() {
    *this = ::std::move(from);
  }

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeStamp& operator=(TimeStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStamp* internal_default_instance() {
    return reinterpret_cast<const TimeStamp*>(
               &_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeStamp& a, TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeStamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeStamp* New() const final {
    return CreateMaybeMessage<TimeStamp>(nullptr);
  }

  TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeStamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TimeStamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // required uint32 time = 1;
  bool has_time() const;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.TimeStamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class MemberInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MemberInfo) */ {
 public:
  MemberInfo();
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);
  MemberInfo(MemberInfo&& from) noexcept
    : MemberInfo() {
    *this = ::std::move(from);
  }

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberInfo& operator=(MemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberInfo* internal_default_instance() {
    return reinterpret_cast<const MemberInfo*>(
               &_MemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemberInfo& a, MemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberInfo* New() const final {
    return CreateMaybeMessage<MemberInfo>(nullptr);
  }

  MemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MemberInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MemberInfo_State State;
  static constexpr State ALIVE =
    MemberInfo_State_ALIVE;
  static constexpr State SUSPICIOUS =
    MemberInfo_State_SUSPICIOUS;
  static constexpr State DEAD =
    MemberInfo_State_DEAD;
  static inline bool State_IsValid(int value) {
    return MemberInfo_State_IsValid(value);
  }
  static constexpr State State_MIN =
    MemberInfo_State_State_MIN;
  static constexpr State State_MAX =
    MemberInfo_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    MemberInfo_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return MemberInfo_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return MemberInfo_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return MemberInfo_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 3,
    kStatusFieldNumber = 1,
    kIncarnationFieldNumber = 2,
  };
  // required .Proto.TimeStamp time_stamp = 3;
  bool has_time_stamp() const;
  void clear_time_stamp();
  const ::Proto::TimeStamp& time_stamp() const;
  ::Proto::TimeStamp* release_time_stamp();
  ::Proto::TimeStamp* mutable_time_stamp();
  void set_allocated_time_stamp(::Proto::TimeStamp* time_stamp);

  // required .Proto.MemberInfo.State status = 1;
  bool has_status() const;
  void clear_status();
  ::Proto::MemberInfo_State status() const;
  void set_status(::Proto::MemberInfo_State value);

  // required uint32 incarnation = 2;
  bool has_incarnation() const;
  void clear_incarnation();
  ::PROTOBUF_NAMESPACE_ID::uint32 incarnation() const;
  void set_incarnation(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.MemberInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::TimeStamp* time_stamp_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 incarnation_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Member :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }
  inline void Swap(Member* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(nullptr);
  }

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Member";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // required .Proto.MemberAddr addr = 1;
  bool has_addr() const;
  void clear_addr();
  const ::Proto::MemberAddr& addr() const;
  ::Proto::MemberAddr* release_addr();
  ::Proto::MemberAddr* mutable_addr();
  void set_allocated_addr(::Proto::MemberAddr* addr);

  // required .Proto.MemberInfo info = 2;
  bool has_info() const;
  void clear_info();
  const ::Proto::MemberInfo& info() const;
  ::Proto::MemberInfo* release_info();
  ::Proto::MemberInfo* mutable_info();
  void set_allocated_info(::Proto::MemberInfo* info);

  // @@protoc_insertion_point(class_scope:Proto.Member)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::MemberAddr* addr_;
  ::Proto::MemberInfo* info_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Table :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Table) */ {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Table& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Table* New() const final {
    return CreateMaybeMessage<Table>(nullptr);
  }

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Table";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
  };
  // repeated .Proto.Member table = 1;
  int table_size() const;
  void clear_table();
  ::Proto::Member* mutable_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Member >*
      mutable_table();
  const ::Proto::Member& table(int index) const;
  ::Proto::Member* add_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Member >&
      table() const;

  // @@protoc_insertion_point(class_scope:Proto.Table)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Member > table_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Gossip :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Gossip) */ {
 public:
  Gossip();
  virtual ~Gossip();

  Gossip(const Gossip& from);
  Gossip(Gossip&& from) noexcept
    : Gossip() {
    *this = ::std::move(from);
  }

  inline Gossip& operator=(const Gossip& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gossip& operator=(Gossip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gossip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gossip* internal_default_instance() {
    return reinterpret_cast<const Gossip*>(
               &_Gossip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Gossip& a, Gossip& b) {
    a.Swap(&b);
  }
  inline void Swap(Gossip* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gossip* New() const final {
    return CreateMaybeMessage<Gossip>(nullptr);
  }

  Gossip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gossip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gossip& from);
  void MergeFrom(const Gossip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gossip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Gossip";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kDestFieldNumber = 2,
    kTableFieldNumber = 3,
  };
  // required .Proto.Member owner = 1;
  bool has_owner() const;
  void clear_owner();
  const ::Proto::Member& owner() const;
  ::Proto::Member* release_owner();
  ::Proto::Member* mutable_owner();
  void set_allocated_owner(::Proto::Member* owner);

  // required .Proto.Member dest = 2;
  bool has_dest() const;
  void clear_dest();
  const ::Proto::Member& dest() const;
  ::Proto::Member* release_dest();
  ::Proto::Member* mutable_dest();
  void set_allocated_dest(::Proto::Member* dest);

  // required .Proto.Table table = 3;
  bool has_table() const;
  void clear_table();
  const ::Proto::Table& table() const;
  ::Proto::Table* release_table();
  ::Proto::Table* mutable_table();
  void set_allocated_table(::Proto::Table* table);

  // @@protoc_insertion_point(class_scope:Proto.Gossip)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Proto::Member* owner_;
  ::Proto::Member* dest_;
  ::Proto::Table* table_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MemberAddr

// required uint32 IP = 1;
inline bool MemberAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberAddr::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberAddr::ip() const {
  // @@protoc_insertion_point(field_get:Proto.MemberAddr.IP)
  return ip_;
}
inline void MemberAddr::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ip_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberAddr.IP)
}

// required uint32 port = 2;
inline bool MemberAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberAddr::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberAddr::port() const {
  // @@protoc_insertion_point(field_get:Proto.MemberAddr.port)
  return port_;
}
inline void MemberAddr::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberAddr.port)
}

// -------------------------------------------------------------------

// TimeStamp

// required uint32 time = 1;
inline bool TimeStamp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeStamp::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TimeStamp::time() const {
  // @@protoc_insertion_point(field_get:Proto.TimeStamp.time)
  return time_;
}
inline void TimeStamp::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
  // @@protoc_insertion_point(field_set:Proto.TimeStamp.time)
}

// -------------------------------------------------------------------

// MemberInfo

// required .Proto.MemberInfo.State status = 1;
inline bool MemberInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberInfo::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Proto::MemberInfo_State MemberInfo::status() const {
  // @@protoc_insertion_point(field_get:Proto.MemberInfo.status)
  return static_cast< ::Proto::MemberInfo_State >(status_);
}
inline void MemberInfo::set_status(::Proto::MemberInfo_State value) {
  assert(::Proto::MemberInfo_State_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberInfo.status)
}

// required uint32 incarnation = 2;
inline bool MemberInfo::has_incarnation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberInfo::clear_incarnation() {
  incarnation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberInfo::incarnation() const {
  // @@protoc_insertion_point(field_get:Proto.MemberInfo.incarnation)
  return incarnation_;
}
inline void MemberInfo::set_incarnation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  incarnation_ = value;
  // @@protoc_insertion_point(field_set:Proto.MemberInfo.incarnation)
}

// required .Proto.TimeStamp time_stamp = 3;
inline bool MemberInfo::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberInfo::clear_time_stamp() {
  if (time_stamp_ != nullptr) time_stamp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::TimeStamp& MemberInfo::time_stamp() const {
  const ::Proto::TimeStamp* p = time_stamp_;
  // @@protoc_insertion_point(field_get:Proto.MemberInfo.time_stamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::TimeStamp*>(
      &::Proto::_TimeStamp_default_instance_);
}
inline ::Proto::TimeStamp* MemberInfo::release_time_stamp() {
  // @@protoc_insertion_point(field_release:Proto.MemberInfo.time_stamp)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::TimeStamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::Proto::TimeStamp* MemberInfo::mutable_time_stamp() {
  _has_bits_[0] |= 0x00000001u;
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TimeStamp>(GetArenaNoVirtual());
    time_stamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MemberInfo.time_stamp)
  return time_stamp_;
}
inline void MemberInfo::set_allocated_time_stamp(::Proto::TimeStamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_stamp_;
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:Proto.MemberInfo.time_stamp)
}

// -------------------------------------------------------------------

// Member

// required .Proto.MemberAddr addr = 1;
inline bool Member::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Member::clear_addr() {
  if (addr_ != nullptr) addr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::MemberAddr& Member::addr() const {
  const ::Proto::MemberAddr* p = addr_;
  // @@protoc_insertion_point(field_get:Proto.Member.addr)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::MemberAddr*>(
      &::Proto::_MemberAddr_default_instance_);
}
inline ::Proto::MemberAddr* Member::release_addr() {
  // @@protoc_insertion_point(field_release:Proto.Member.addr)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::MemberAddr* temp = addr_;
  addr_ = nullptr;
  return temp;
}
inline ::Proto::MemberAddr* Member::mutable_addr() {
  _has_bits_[0] |= 0x00000001u;
  if (addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::MemberAddr>(GetArenaNoVirtual());
    addr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Member.addr)
  return addr_;
}
inline void Member::set_allocated_addr(::Proto::MemberAddr* addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete addr_;
  }
  if (addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addr_ = addr;
  // @@protoc_insertion_point(field_set_allocated:Proto.Member.addr)
}

// required .Proto.MemberInfo info = 2;
inline bool Member::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Member::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::MemberInfo& Member::info() const {
  const ::Proto::MemberInfo* p = info_;
  // @@protoc_insertion_point(field_get:Proto.Member.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::MemberInfo*>(
      &::Proto::_MemberInfo_default_instance_);
}
inline ::Proto::MemberInfo* Member::release_info() {
  // @@protoc_insertion_point(field_release:Proto.Member.info)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::MemberInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Proto::MemberInfo* Member::mutable_info() {
  _has_bits_[0] |= 0x00000002u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::MemberInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Member.info)
  return info_;
}
inline void Member::set_allocated_info(::Proto::MemberInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Proto.Member.info)
}

// -------------------------------------------------------------------

// Table

// repeated .Proto.Member table = 1;
inline int Table::table_size() const {
  return table_.size();
}
inline void Table::clear_table() {
  table_.Clear();
}
inline ::Proto::Member* Table::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Table.table)
  return table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Member >*
Table::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Table.table)
  return &table_;
}
inline const ::Proto::Member& Table::table(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Table.table)
  return table_.Get(index);
}
inline ::Proto::Member* Table::add_table() {
  // @@protoc_insertion_point(field_add:Proto.Table.table)
  return table_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::Member >&
Table::table() const {
  // @@protoc_insertion_point(field_list:Proto.Table.table)
  return table_;
}

// -------------------------------------------------------------------

// Gossip

// required .Proto.Member owner = 1;
inline bool Gossip::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gossip::clear_owner() {
  if (owner_ != nullptr) owner_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Proto::Member& Gossip::owner() const {
  const ::Proto::Member* p = owner_;
  // @@protoc_insertion_point(field_get:Proto.Gossip.owner)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Member*>(
      &::Proto::_Member_default_instance_);
}
inline ::Proto::Member* Gossip::release_owner() {
  // @@protoc_insertion_point(field_release:Proto.Gossip.owner)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::Member* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::Proto::Member* Gossip::mutable_owner() {
  _has_bits_[0] |= 0x00000001u;
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Member>(GetArenaNoVirtual());
    owner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Gossip.owner)
  return owner_;
}
inline void Gossip::set_allocated_owner(::Proto::Member* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Proto.Gossip.owner)
}

// required .Proto.Member dest = 2;
inline bool Gossip::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gossip::clear_dest() {
  if (dest_ != nullptr) dest_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Proto::Member& Gossip::dest() const {
  const ::Proto::Member* p = dest_;
  // @@protoc_insertion_point(field_get:Proto.Gossip.dest)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Member*>(
      &::Proto::_Member_default_instance_);
}
inline ::Proto::Member* Gossip::release_dest() {
  // @@protoc_insertion_point(field_release:Proto.Gossip.dest)
  _has_bits_[0] &= ~0x00000002u;
  ::Proto::Member* temp = dest_;
  dest_ = nullptr;
  return temp;
}
inline ::Proto::Member* Gossip::mutable_dest() {
  _has_bits_[0] |= 0x00000002u;
  if (dest_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Member>(GetArenaNoVirtual());
    dest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Gossip.dest)
  return dest_;
}
inline void Gossip::set_allocated_dest(::Proto::Member* dest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dest_;
  }
  if (dest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dest_ = dest;
  // @@protoc_insertion_point(field_set_allocated:Proto.Gossip.dest)
}

// required .Proto.Table table = 3;
inline bool Gossip::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gossip::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::Table& Gossip::table() const {
  const ::Proto::Table* p = table_;
  // @@protoc_insertion_point(field_get:Proto.Gossip.table)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::Table*>(
      &::Proto::_Table_default_instance_);
}
inline ::Proto::Table* Gossip::release_table() {
  // @@protoc_insertion_point(field_release:Proto.Gossip.table)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::Table* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::Proto::Table* Gossip::mutable_table() {
  _has_bits_[0] |= 0x00000004u;
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Table>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.Gossip.table)
  return table_;
}
inline void Gossip::set_allocated_table(::Proto::Table* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:Proto.Gossip.table)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::MemberInfo_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::MemberInfo_State>() {
  return ::Proto::MemberInfo_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto
